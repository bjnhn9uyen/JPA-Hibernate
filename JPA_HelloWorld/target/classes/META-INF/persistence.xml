<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
	<!-- Your starting point in JPA is the persistence unit. This is the standard configuration file for persistence units. -->
	<!-- A persistence unit is a pairing of your domain model class mappings with a database connection -->
	<persistence-unit name="JPA_HelloWorld">
		<class>model.Message</class>

		<!-- A persistent unit has persistent (mapped) classes. You list them here -->

		<!-- Hibernate can scan your classpath for mapped classes and add them automatically to your persistence unit. This setting disables that feature -->
		<exclude-unlisted-classes>true</exclude-unlisted-classes>

		<properties>

			<!-- Any standard properties have the javax.persistence name prefix -->
			<property name="javax.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver" />
			<property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/hibernate" />
			<property name="javax.persistence.jdbc.user" value="root" />
			<property name="javax.persistence.jdbc.password" value="admin" />

			<!-- The JPA engine should drop and re-create the SQL schema in the database automatically when it boots. -->
			<!-- This is ideal for automated testing, when you want to work with a clean database for every test run -->
			<property name="javax.persistence.schema-generation.database.action" value="drop-and-create" />

			<!-- let Hibernate format the SQL nicely and generate comments into the SQL string so you know why Hibernate executed the SQL statement -->
			<!-- <property name="hibernate.format_sql" value="true" /> -->
			<!-- <property name="hibernate.use_sql_comments" value="true" /> -->
			<!-- <property name="hibernate.show_sql" value="true" /> -->

		</properties>

	</persistence-unit>
</persistence>

<!-- RESOURCE_LOCAL and JTA : https://stackoverflow.com/questions/1962525/persistence-unit-as-resource-local-or-jta -->
<!-- JPA implementations have the choice of managing transactions themselves (RESOURCE_LOCAL), or having them managed by the application server's JTA implementation. -->
<!-- In most cases, RESOURCE_LOCAL is fine. This would use basic JDBC-level transactions. The down-side is that the transaction is local to the JPA persistence 
	unit, so if you want a transaction that spans multiple persistence units (or other databases), then RESOURCE_LOCAL may not be good enough -->
<!-- To use JTA, you need support for it in your application server, and also support from the JDBC driver. -->

